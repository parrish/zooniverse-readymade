// Generated by CoffeeScript 1.7.1
(function() {
  var Api, ClassifyPage, Profile, Project, SiteBackground, SiteHeader, StackOfPages, TopBar, User, ZooniverseFooter, dash, homePageTemplate, teamPageTemplate,
    __slice = [].slice;

  Api = require('zooniverse/lib/api');

  TopBar = require('zooniverse/controllers/top-bar');

  SiteBackground = require('./site-background');

  SiteHeader = require('./site-header');

  StackOfPages = require('stack-of-pages');

  homePageTemplate = require('./templates/home-page');

  ZooniverseFooter = require('zooniverse/controllers/footer');

  dash = require('./lib/dash');

  ClassifyPage = require('./classify-page');

  Profile = require('zooniverse/controllers/profile');

  teamPageTemplate = require('./templates/team-page');

  User = require('zooniverse/models/user');

  Project = (function() {
    Project.prototype.parent = document.body;

    Project.prototype.background = '';

    Project.prototype.id = '';

    Project.prototype.producer = '';

    Project.prototype.title = '';

    Project.prototype.summary = '';

    Project.prototype.description = '';

    Project.prototype.about = '';

    Project.prototype.pages = null;

    Project.prototype.workflows = null;

    Project.prototype.tasks = null;

    Project.prototype.firstTask = '';

    Project.prototype.subjectGroup = false;

    Project.prototype.organizations = null;

    Project.prototype.scientists = null;

    Project.prototype.developers = null;

    function Project(configuration) {
      var content, examples, firstTask, footer, hash, key, label, newContent, page, property, subjectGroup, tasks, title, tutorialSteps, value, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      if (configuration == null) {
        configuration = {};
      }
      for (property in configuration) {
        value = configuration[property];
        this[property] = value;
      }
      if (this.background) {
        this.siteBackground = new SiteBackground({
          src: this.background,
          el: '#site-background'
        });
      }
      if (this.id) {
        this.connect(this.id);
      }
      this.header = new SiteHeader({
        el: '#main-header',
        template: SiteHeader.prototype.template(this)
      });
      this.stack = new StackOfPages({
        el: document.getElementById('main-content')
      });
      this.stack.el.className += ' readymade-main-stack';
      if (this.summary || this.description) {
        this.homePage = this.addPage('#/', 'Home', homePageTemplate(this));
        if (this.footer !== false) {
          footer = new ZooniverseFooter;
          footer.el.appendTo('#main-footer');
        }
      }
      this.classifyPages = [];
      if (this.workflows != null) {
        _ref = this.workflows;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], key = _ref1.key, label = _ref1.label, subjectGroup = _ref1.subjectGroup, tasks = _ref1.tasks, firstTask = _ref1.firstTask, tutorialSteps = _ref1.tutorialSteps, examples = _ref1.examples;
          if (label == null) {
            label = 'Classify';
          }
          if (key == null) {
            key = dash(label).replace(/\-/g, '_');
          }
          page = new ClassifyPage({
            subjectGroup: subjectGroup != null ? subjectGroup : this.subjectGroup,
            workflow: key,
            tasks: tasks,
            firstTask: firstTask,
            tutorialSteps: tutorialSteps,
            examples: examples
          });
          this.addPage("#/" + (dash(label)), label, page);
          this.classifyPages.push(page);
        }
      } else if (this.tasks != null) {
        page = new ClassifyPage({
          tasks: this.tasks,
          firstTask: this.firstTask,
          subjectGroup: this.subjectGroup,
          tutorialSteps: this.tutorialSteps,
          examples: this.examples
        });
        this.addPage('#/classify', 'Classify', page);
        this.classifyPages.push(page);
      }
      if (this.profile !== false) {
        this.profile = new Profile;
        this.addPage('#/profile', 'Profile', this.profile);
      }
      if (this.pages != null) {
        _ref2 = this.pages;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          page = _ref2[_j];
          for (title in page) {
            content = page[title];
            if (content instanceof Array) {
              newContent = this.makeStackFromPages(content, [dash(title)]);
            } else {
              newContent = "<div class='readymade-generic-page' data-readymade-page='" + (dash(title)) + "'>" + content + "</div>";
            }
            hash = "#/" + (dash(title));
            this.addPage(hash, title, newContent);
          }
        }
      }
      if (this.organizations || this.scientists || this.developers) {
        this.addPage('#/team', 'Team', teamPageTemplate(this));
      }
      setTimeout((function(_this) {
        return function() {
          return _this.stack.onHashChange();
        };
      })(this));
      User.fetch();
    }

    Project.prototype.makeStackFromPages = function(pages, currentPath) {
      var container, content, description, hash, i, mapOfHashes, nav, stack, title, _i, _len;
      if (currentPath == null) {
        currentPath = [];
      }
      mapOfHashes = {};
      nav = document.createElement('nav');
      nav.className = 'readymade-subnav';
      for (i = _i = 0, _len = pages.length; _i < _len; i = ++_i) {
        description = pages[i];
        for (title in description) {
          content = description[title];
          currentPath.push(dash(title));
          hash = ['#'].concat(__slice.call(currentPath)).join('/');
          if (mapOfHashes["default"] == null) {
            mapOfHashes["default"] = hash;
          }
          nav.insertAdjacentHTML('beforeEnd', "<a href=\"" + hash + "\">" + title + "</a>");
          mapOfHashes[hash] = content instanceof Array ? this.makeStackFromPages(content, currentPath) : typeof content === 'string' ? "<div class='readymade-generic-page' data-readymade-page='" + (dash(title)) + "'>" + content + "</div>" : (container = document.createElement('div'), content);
          currentPath.pop();
        }
      }
      stack = new StackOfPages(mapOfHashes);
      stack.el.insertAdjacentHTML('afterBegin', nav.outerHTML);
      setTimeout(function() {
        return stack.onHashChange();
      });
      return stack;
    };

    Project.prototype.connect = function(project) {
      this.api = new Api({
        project: project
      });
      return this.topBar = new TopBar({
        el: '#top-bar'
      });
    };

    Project.prototype.addPage = function(href, label, content) {
      this.header.addNavLink(href, label);
      if (content instanceof StackOfPages) {
        href += "/*";
      }
      this.stack.add(href, content);
      return this.stack.el.children[this.stack.el.children.length - 1];
    };

    return Project;

  })();

  module.exports = Project;

}).call(this);
