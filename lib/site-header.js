// Generated by CoffeeScript 1.8.0
(function() {
  var $, Controller, SiteHeader, TabSet,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Controller = require('zooniverse/controllers/base-controller');

  TabSet = require('./tab-control');

  $ = window.jQuery;

  SiteHeader = (function(_super) {
    __extends(SiteHeader, _super);

    SiteHeader.prototype.className = 'readymade-site-header';

    SiteHeader.prototype.template = require('./templates/site-header');

    SiteHeader.prototype.elements = {
      '.readymade-site-links': 'linksList'
    };

    function SiteHeader() {
      this.onHashChange = __bind(this.onHashChange, this);
      SiteHeader.__super__.constructor.apply(this, arguments);
      addEventListener('hashchange', this.onHashChange);
      setTimeout(this.onHashChange);
    }

    SiteHeader.prototype.addNavLink = function(href, label) {
      var li, link;
      link = document.createElement('a');
      link.href = href;
      link.textContent = label;
      link.className = 'readymade-site-link';
      li = document.createElement(li);
      this.linksList.append(li.appendChild(link));
      return link;
    };

    SiteHeader.prototype.onHashChange = function() {
      var e, panel;
      if (!(window.location.hash === '' || window.location.hash.slice(0, 2) === '#/')) {
        panel = document.querySelector(window.location.hash);
        e = new CustomEvent('activate-in-stack');
        return panel != null ? panel.dispatchEvent(e) : void 0;
      }
    };

    SiteHeader.prototype.buildTabset = function(tabs, panels, prefix, stack) {
      var i, panel, subnav, tab, tabset, _fn, _i, _len, _results;
      tabset = new TabSet;
      _fn = function(panel) {
        return panel.addEventListener('activate-in-stack', function(e) {
          e.stopPropagation();
          return tabset.activate(panel);
        });
      };
      _results = [];
      for (i = _i = 0, _len = tabs.length; _i < _len; i = ++_i) {
        tab = tabs[i];
        panel = panels[i];
        if (tab.id === '') {
          tab.id = prefix + '-tab-' + i;
        }
        if (panel.id === '') {
          panel.id = prefix + '-' + i;
        }
        tabset.add(tab, panel, panel.hasAttribute(stack.activatedAttr));
        _fn(panel);
        subnav = panel.querySelector('.readymade-subnav');
        if (subnav != null) {
          _results.push(this.buildNav(stack, subnav, panel.id));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    SiteHeader.prototype.buildNav = function(stack, nav, prefix) {
      var hash, link, nav_links, panel, panels, _i, _len, _ref;
      if (nav == null) {
        nav = this.linksList;
      }
      if (prefix == null) {
        prefix = 'nav';
      }
      nav_links = [];
      panels = [];
      if (nav[0] != null) {
        nav = nav[0];
      }
      _ref = nav.querySelectorAll('a');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        link = _ref[_i];
        hash = link.getAttribute('href');
        panel = document.querySelector(hash);
        if (panel != null) {
          panels.push(panel);
          nav_links.push(link);
        }
      }
      return this.buildTabset(nav_links, panels, prefix, stack);
    };

    return SiteHeader;

  })(Controller);

  module.exports = SiteHeader;

}).call(this);
